fn adverbs() -> Vec<&'static str> {
    vec![
        "about",
        "above",
        "absolutely",
        "actually",
        "after",
        "almost",
        "always",
        "anywhere",
        "around",
        "backward",
        "basically",
        "before",
        "below",
        "brightly",
        "broadly",
        "carefully",
        "certainly",
        "clearly",
        "closely",
        "completely",
        "daily",
        "definitely",
        "directly",
        "downward",
        "early",
        "eastward",
        "enough",
        "especially",
        "essentially",
        "even",
        "everywhere",
        "exactly",
        "exclusively",
        "extensively",
        "firmly",
        "forward",
        "frequently",
        "generally",
        "gently",
        "happily",
        "here",
        "indirectly",
        "inside",
        "inwardly",
        "just",
        "kindly",
        "late",
        "likely",
        "loudly",
        "mainly",
        "meanwhile",
        "merely",
        "naturally",
        "nearly",
        "never",
        "northward",
        "notably",
        "nowhere",
        "obviously",
        "often",
        "outside",
        "outwardly",
        "partially",
        "particularly",
        "possibly",
        "pretty",
        "probably",
        "quickly",
        "quietly",
        "quite",
        "rarely",
        "rather",
        "really",
        "remarkably",
        "sadly",
        "sharply",
        "significantly",
        "simply",
        "slightly",
        "slowly",
        "so",
        "solely",
        "sometimes",
        "somewhat",
        "somewhere",
        "southward",
        "specifically",
        "suddenly",
        "there",
        "too",
        "totally",
        "universally",
        "upward",
        "usually",
        "utterly",
        "very",
        "warmly",
        "westward",
        "wholly",
        "widely",
    ]
}

fn adjectives() -> Vec<&'static str> {
    vec![
        "other",
        "new",
        "good",
        "high",
        "old",
        "great",
        "big",
        "american",
        "small",
        "large",
        "national",
        "young",
        "different",
        "black",
        "long",
        "little",
        "important",
        "political",
        "bad",
        "white",
        "real",
        "best",
        "right",
        "social",
        "only",
        "public",
        "sure",
        "low",
        "early",
        "able",
        "human",
        "local",
        "late",
        "hard",
        "major",
        "better",
        "economic",
        "strong",
        "possible",
        "whole",
        "free",
        "military",
        "true",
        "federal",
        "international",
        "full",
        "special",
        "easy",
        "clear",
        "recent",
        "certain",
        "personal",
        "open",
        "red",
        "difficult",
        "available",
        "likely",
        "short",
        "single",
        "medical",
        "current",
        "wrong",
        "private",
        "past",
        "foreign",
        "fine",
        "common",
        "poor",
        "natural",
        "significant",
        "similar",
        "hot",
        "dead",
        "central",
        "happy",
        "serious",
        "ready",
        "simple",
        "left",
        "physical",
        "general",
        "environmental",
        "financial",
        "blue",
        "democratic",
        "dark",
        "various",
        "entire",
        "close",
        "legal",
        "religious",
        "cold",
        "final",
        "main",
        "green",
        "nice",
        "huge",
        "popular",
        "traditional",
        "cultural",
    ]
}

fn nouns() -> Vec<&'static str> {
    vec![
        "time",
        "year",
        "people",
        "way",
        "day",
        "man",
        "thing",
        "woman",
        "life",
        "child",
        "world",
        "school",
        "state",
        "family",
        "student",
        "group",
        "country",
        "problem",
        "hand",
        "part",
        "place",
        "case",
        "week",
        "company",
        "system",
        "program",
        "question",
        "work",
        "government",
        "number",
        "night",
        "point",
        "home",
        "water",
        "room",
        "mother",
        "area",
        "money",
        "story",
        "fact",
        "month",
        "lot",
        "right",
        "study",
        "book",
        "eye",
        "job",
        "word",
        "business",
        "issue",
        "side",
        "kind",
        "head",
        "house",
        "service",
        "friend",
        "father",
        "power",
        "hour",
        "game",
        "line",
        "end",
        "member",
        "law",
        "car",
        "city",
        "community",
        "name",
        "president",
        "team",
        "minute",
        "idea",
        "kid",
        "body",
        "information",
        "back",
        "parent",
        "face",
        "others",
        "level",
        "office",
        "door",
        "health",
        "person",
        "art",
        "war",
        "history",
        "party",
        "result",
        "change",
        "morning",
        "reason",
        "research",
        "girl",
        "guy",
        "moment",
        "air",
        "teacher",
        "force",
        "education",
    ]
}

fn main() {
    use tinyrand::{Rand, RandRange, Seeded};

    let seed = tinyrand_std::ClockSeed::default().next_u64();
    let mut range = tinyrand::StdRand::seed(seed);

    let adverbs = adverbs();
    let adjectives = adjectives();
    let nouns = nouns();

    let adverb = adverbs[range.next_range(0..adverbs.len())];
    let adjective = adjectives[range.next_range(0..adjectives.len())];
    let noun1 = nouns[range.next_range(0..nouns.len())];
    let noun2 = loop {
        let noun2 = nouns[range.next_range(0..nouns.len())];
        if noun1 != noun2 {
            break noun2;
        }
    };

    println!("{}-{}-{}-{}", adverb, adjective, noun1, noun2);

}
